/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "projCHP"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "projCHP"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int function_arg;	/**< @brief choose method (default='0').  */
  char * function_orig;	/**< @brief choose method original value given at command line.  */
  const char *function_help; /**< @brief choose method help description.  */
  int list_function_flag;	/**< @brief list available function (default=off).  */
  const char *list_function_help; /**< @brief list available function help description.  */
  int resolutionX_arg;	/**< @brief nombre de points totals dans le découpage horizontal (default='10').  */
  char * resolutionX_orig;	/**< @brief nombre de points totals dans le découpage horizontal original value given at command line.  */
  const char *resolutionX_help; /**< @brief nombre de points totals dans le découpage horizontal help description.  */
  int resolutionY_arg;	/**< @brief nombre de points totals dans le découpage vertical (default='10').  */
  char * resolutionY_orig;	/**< @brief nombre de points totals dans le découpage vertical original value given at command line.  */
  const char *resolutionY_help; /**< @brief nombre de points totals dans le découpage vertical help description.  */
  int recouvr_arg;	/**< @brief nombre de ligne dans le recouvrement (default='1').  */
  char * recouvr_orig;	/**< @brief nombre de ligne dans le recouvrement original value given at command line.  */
  const char *recouvr_help; /**< @brief nombre de ligne dans le recouvrement help description.  */
  double Lx_arg;	/**< @brief x = [0, Lx] (default='1.0').  */
  char * Lx_orig;	/**< @brief x = [0, Lx] original value given at command line.  */
  const char *Lx_help; /**< @brief x = [0, Lx] help description.  */
  double Ly_arg;	/**< @brief y = [0, Ly] (default='1.0').  */
  char * Ly_orig;	/**< @brief y = [0, Ly] original value given at command line.  */
  const char *Ly_help; /**< @brief y = [0, Ly] help description.  */
  char * solver_arg;	/**< @brief Gradient Conjugué (CG), Jacobi (J), Gauss-Seidel (GS) (default='CG').  */
  char * solver_orig;	/**< @brief Gradient Conjugué (CG), Jacobi (J), Gauss-Seidel (GS) original value given at command line.  */
  const char *solver_help; /**< @brief Gradient Conjugué (CG), Jacobi (J), Gauss-Seidel (GS) help description.  */
  int Nit_arg;	/**< @brief Nombre de pas de temps (default='2000').  */
  char * Nit_orig;	/**< @brief Nombre de pas de temps original value given at command line.  */
  const char *Nit_help; /**< @brief Nombre de pas de temps help description.  */
  double Tmax_arg;	/**< @brief Durée de l'évolution en secondes (default='10.0').  */
  char * Tmax_orig;	/**< @brief Durée de l'évolution en secondes original value given at command line.  */
  const char *Tmax_help; /**< @brief Durée de l'évolution en secondes help description.  */
  int verbose_flag;	/**< @brief Toggle verbose output (default=on).  */
  const char *verbose_help; /**< @brief Toggle verbose output help description.  */
  int file_flag;	/**< @brief Toggle file output (default=on).  */
  const char *file_help; /**< @brief Toggle file output help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int function_given ;	/**< @brief Whether function was given.  */
  unsigned int list_function_given ;	/**< @brief Whether list-function was given.  */
  unsigned int resolutionX_given ;	/**< @brief Whether resolutionX was given.  */
  unsigned int resolutionY_given ;	/**< @brief Whether resolutionY was given.  */
  unsigned int recouvr_given ;	/**< @brief Whether recouvr was given.  */
  unsigned int Lx_given ;	/**< @brief Whether Lx was given.  */
  unsigned int Ly_given ;	/**< @brief Whether Ly was given.  */
  unsigned int solver_given ;	/**< @brief Whether solver was given.  */
  unsigned int Nit_given ;	/**< @brief Whether Nit was given.  */
  unsigned int Tmax_given ;	/**< @brief Whether Tmax was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int file_given ;	/**< @brief Whether file was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
